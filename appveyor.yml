# Copyright 2016, 2017 Peter Dimov
# Copyright 2017 - 2019 James E. King III
# Copyright 2019 - 2020 Alexander Grund
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

version: 1.0.{build}-{branch}

branches:
  only:
    - master
    - develop
    - /bugfix\/.*/
    - /feature\/.*/
    - /fix\/.*/
    - /pr\/.*/

matrix:
  fast_finish: false

environment:
  global:
    # see: http://www.boost.org/build/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
    # to use the default for a given environment, comment it out; recommend you build debug and release however:
    # on Windows it is important to exercise all the possibilities, especially shared vs static, however most
    # libraries that care about this exercise it in their Jamfiles...
    # B2_ADDRESS_MODEL: 64,32
    B2_LINK: shared,static
    # B2_THREADING: threading=multi,single
    B2_VARIANT: release,debug
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      TOOLSET: msvc-14.2
      GENERATOR: Visual Studio 16 2019
      configuration: Debug
      COVERAGE: true
      

install:
  - set SELF=%APPVEYOR_PROJECT_NAME:-=_%
  - git clone https://github.com/boostorg/boost-ci.git C:\boost-ci
  - xcopy /s /e /q /i C:\boost-ci\ci .\ci
  - ci\appveyor\install.bat

build: off

test_script:
  - PATH=%ADDPATH%%PATH%
  - IF DEFINED B2_ADDRESS_MODEL (SET B2_ADDRESS_MODEL=address-model=%B2_ADDRESS_MODEL%)
  - IF DEFINED B2_LINK (SET B2_LINK=link=%B2_LINK%)
  - IF DEFINED B2_VARIANT (SET B2_VARIANT=variant=%B2_VARIANT%)
  - IF DEFINED B2_CXXFLAGS (SET B2_CXXFLAGS=cxxflags=%B2_CXXFLAGS%)
  # The definition of B2_TOOLCXX omits B2_CXXSTD= if it was not defined above
  - IF NOT DEFINED B2_CXXSTD (SET B2_TOOLCXX=toolset=%B2_TOOLSET%) ELSE (SET B2_TOOLCXX=toolset=%B2_TOOLSET% cxxstd=%B2_CXXSTD%)
  # Echo the complete build command to the build log
  - IF NOT DEFINED SCRIPT                         (ECHO b2 libs/%SELF:\=/%/test %B2_TOOLCXX% %B2_CXXFLAGS% %B2_DEFINES% %B2_THREADING% %B2_ADDRESS_MODEL% %B2_LINK% %B2_THREADING% %B2_VARIANT% -j3)
  # Now go build...
  - IF DEFINED SCRIPT (call libs\%SELF%\%SCRIPT%) ELSE (b2 libs/%SELF:\=/%/test %B2_TOOLCXX% %B2_CXXFLAGS% %B2_DEFINES% %B2_THREADING% %B2_ADDRESS_MODEL% %B2_LINK% %B2_THREADING% %B2_VARIANT% -j3)
  - ps: |
        If ("$env:BOOST_CMAKE" -eq "1") {
          ./b2 --clean

          mkdir __build_static | cd
          cmake -DBOOST_ENABLE_CMAKE=1 -DBoost_VERBOSE=1 -DBOOST_INCLUDE_LIBRARIES=nowide ..
          cmake --build . --config Debug --parallel 4
          ctest --output-on-failure --build-config Debug
          cmake --build . --config Release --parallel 4
          ctest --output-on-failure --build-config Release

          cd ..

          mkdir __build_shared | cd
          cmake -DBOOST_ENABLE_CMAKE=1 -DBoost_VERBOSE=1 -DBUILD_SHARED_LIBS=ON -DBOOST_INCLUDE_LIBRARIES=nowide ..
          cmake --build . --config Debug --parallel 4
          ctest --output-on-failure --build-config Debug
          cmake --build . --config Release --parallel 4
          ctest --output-on-failure --build-config Release
        }

for:
  - matrix:
      only:
        - CMAKE: true
    install: true
    before_build:
      - if exist build\ (rmdir /S /Q build)
      - set "INSTALL_DIR=%APPVEYOR_BUILD_FOLDER%\installed"
      - if exist %INSTALL_DIR%\ (rmdir /S /Q %INSTALL_DIR%)
      - mkdir build
      - cd build
      - cmake -G "%GENERATOR%" -DCMAKE_INSTALL_PREFIX=%INSTALL_DIR% ..

    build_script: cmake --build . --config %configuration% --parallel 4

    test_script:
      - ctest --output-on-failure -C %configuration% --parallel 4
      # Build consumer example test
      - cmake --build . --config %configuration% --target install
      - del /F /S /Q *
      - cmake ../test/exampleProject -G "%GENERATOR%" -DCMAKE_PREFIX_PATH=%APPVEYOR_BUILD_FOLDER%\installed
      - cmake --build . --config %configuration%
      - ctest --output-on-failure -C %configuration% --parallel 4
  - matrix:
      only:
        - COVERAGE: true
    before_build:
      - b2 -j3 --with-filesystem --with-system --with-chrono toolset=%TOOLSET% %CXXSTD% address-model=64 variant=debug link=static
      - choco install opencppcoverage
      - ps: Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile $env:APPVEYOR_BUILD_FOLDER\codecov.sh
    build_script:
      - set PATH=C:\Program Files\OpenCppCoverage;%PATH%
      - set BOOST_ROOT=%cd%
      - mkdir build
      - cd build
      - cmake -G "%GENERATOR%" %BOOST_ROOT%\libs\nowide -DBOOST_NOWIDE_COVERAGE=ON
      - cmake --build . --config Debug --target boost_nowide-coverage --parallel 4
      - copy test\cobertura.xml %APPVEYOR_BUILD_FOLDER%
    test_script:
      - set COVERAGE_XML=cobertura.xml
      #- ps: (Get-Content $env:COVERAGE_XML) -replace '(.*)filename=\".*\\libs\\nowide\\(.*)\"(.*)', '$1 filename="$2"$3' | Set-Content $env:COVERAGE_XML
      - cd %APPVEYOR_BUILD_FOLDER%
      # Work around for https://community.codecov.io/t/bash-script-does-not-detect-appveyor/1094
      - ps: |
            $env:APPVEYOR="true"
            $env:CI="true"
            $env:PATH="C:\Program Files\Git\bin;$env:PATH"
            bash codecov.sh -f "$env:COVERAGE_XML" -e APPVEYOR_BUILD_WORKER_IMAGE -X gcov -X search -Z
